#pragma once

#ifndef _CST_INPUT_
#define _CST_INPUT_

#include <string>
#include <vector>

namespace CST{



	struct _CST_Controller;
	typedef struct _CST_Controller CST_Controller;

	enum CST_KEYBOARD_KEY;

	typedef std::vector<CST_KEYBOARD_KEY> CST_PressedKeys;

	enum CST_KEYBOARD_KEY{
		CST_KEY_A = 4,
		CST_KEY_B = 5,
		CST_KEY_C = 6,
		CST_KEY_D = 7,
		CST_KEY_E = 8,
		CST_KEY_F = 9,
		CST_KEY_G = 10,
		CST_KEY_H = 11,
		CST_KEY_I = 12,
		CST_KEY_J = 13,
		CST_KEY_K = 14,
		CST_KEY_L = 15,
		CST_KEY_M = 16,
		CST_KEY_N = 17,
		CST_KEY_O = 18,
		CST_KEY_P = 19,
		CST_KEY_Q = 20,
		CST_KEY_R = 21,
		CST_KEY_S = 22,
		CST_KEY_T = 23,
		CST_KEY_U = 24,
		CST_KEY_V = 25,
		CST_KEY_W = 26,
		CST_KEY_X = 27,
		CST_KEY_Y = 28,
		CST_KEY_Z = 29,
		CST_KEY_1 = 30,
		CST_KEY_2 = 31,
		CST_KEY_3 = 32,
		CST_KEY_4 = 33,
		CST_KEY_5 = 34,
		CST_KEY_6 = 35,
		CST_KEY_7 = 36,
		CST_KEY_8 = 37,
		CST_KEY_9 = 38,
		CST_KEY_0 = 39,
		CST_KEY_RETURN = 40,
		CST_KEY_ESCAPE = 41,
		CST_KEY_BACKSPACE = 42,
		CST_KEY_TAB = 43,
		CST_KEY_SPACE = 44,
		CST_KEY_MINUS = 45,
		CST_KEY_EQUALS = 46,
		CST_KEY_LEFTBRACKET = 47,
		CST_KEY_RIGHTBRACKET = 48,
		CST_KEY_BACKSLASH = 49,
		CST_KEY_NONUSHASH = 50,
		CST_KEY_SEMICOLON = 51,
		CST_KEY_APOSTROPHE = 52,
		CST_KEY_GRAVE = 53,
		CST_KEY_COMMA = 54,
		CST_KEY_PERIOD = 55,
		CST_KEY_SLASH = 56,
		CST_KEY_CAPSLOCK = 57,
		CST_KEY_F1 = 58,
		CST_KEY_F2 = 59,
		CST_KEY_F3 = 60,
		CST_KEY_F4 = 61,
		CST_KEY_F5 = 62,
		CST_KEY_F6 = 63,
		CST_KEY_F7 = 64,
		CST_KEY_F8 = 65,
		CST_KEY_F9 = 66,
		CST_KEY_F10 = 67,
		CST_KEY_F11 = 68,
		CST_KEY_F12 = 69,
		CST_KEY_PRINTSCREEN = 70,
		CST_KEY_SCROLLLOCK = 71,
		CST_KEY_PAUSE = 72,
		CST_KEY_INSERT = 73,
		CST_KEY_HOME = 74,
		CST_KEY_PAGEUP = 75,
		CST_KEY_DELETE = 76,
		CST_KEY_END = 77,
		CST_KEY_PAGEDOWN = 78,
		CST_KEY_RIGHT = 79,
		CST_KEY_LEFT = 80,
		CST_KEY_DOWN = 81,
		CST_KEY_UP = 82,
		CST_KEY_NUMLOCKCLEAR = 83,
		CST_KEY_KP_DIVIDE = 84,
		CST_KEY_KP_MULTIPLY = 85,
		CST_KEY_KP_MINUS = 86,
		CST_KEY_KP_PLUS = 87,
		CST_KEY_KP_ENTER = 88,
		CST_KEY_KP_1 = 89,
		CST_KEY_KP_2 = 90,
		CST_KEY_KP_3 = 91,
		CST_KEY_KP_4 = 92,
		CST_KEY_KP_5 = 93,
		CST_KEY_KP_6 = 94,
		CST_KEY_KP_7 = 95,
		CST_KEY_KP_8 = 96,
		CST_KEY_KP_9 = 97,
		CST_KEY_KP_0 = 98,
		CST_KEY_KP_PERIOD = 99,
		CST_KEY_NONUSBACKSLASH = 100,
		CST_KEY_APPLICATION = 101,
		CST_KEY_POWER = 102,
		CST_KEY_KP_EQUALS = 103,
		CST_KEY_F13 = 104,
		CST_KEY_F14 = 105,
		CST_KEY_F15 = 106,
		CST_KEY_F16 = 107,
		CST_KEY_F17 = 108,
		CST_KEY_F18 = 109,
		CST_KEY_F19 = 110,
		CST_KEY_F20 = 111,
		CST_KEY_F21 = 112,
		CST_KEY_F22 = 113,
		CST_KEY_F23 = 114,
		CST_KEY_F24 = 115,
		CST_KEY_EXECUTE = 116,
		CST_KEY_HELP = 117,
		CST_KEY_MENU = 118,
		CST_KEY_SELECT = 119,
		CST_KEY_STOP = 120,
		CST_KEY_AGAIN = 121,
		CST_KEY_UNDO = 122,
		CST_KEY_CUT = 123,
		CST_KEY_COPY = 124,
		CST_KEY_PASTE = 125,
		CST_KEY_FIND = 126,
		CST_KEY_MUTE = 127,
		CST_KEY_VOLUMEUP = 128,
		CST_KEY_VOLUMEDOWN = 129,
		CST_KEY_KP_COMMA = 133,
		CST_KEY_KP_EQUALSAS400 = 134,
		CST_KEY_ALTERASE = 153,
		CST_KEY_SYSREQ = 154,
		CST_KEY_CANCEL = 155,
		CST_KEY_CLEAR = 156,
		CST_KEY_PRIOR = 157,
		CST_KEY_RETURN2 = 158,
		CST_KEY_SEPARATOR = 159,
		CST_KEY_OUT = 160,
		CST_KEY_OPER = 161,
		CST_KEY_CLEARAGAIN = 162,
		CST_KEY_CRSEL = 163,
		CST_KEY_EXSEL = 164,
		CST_KEY_KP_00 = 176,
		CST_KEY_KP_000 = 177,
		CST_KEY_THOUSANDSSEPARATOR = 178,
		CST_KEY_DECIMALSEPARATOR = 179,
		CST_KEY_CURRENCYUNIT = 180,
		CST_KEY_CURRENCYSUBUNIT = 181,
		CST_KEY_KBDILLUMUP = 280,
		CST_KEY_EJECT = 281,
		CST_KEY_SLEEP = 282,
		CST_KEY_APP1 = 283,
		CST_KEY_APP2 = 284,
	};

	enum CST_CONTROLLER_BUTTON {
		CST_CONTROLLER_BUTTON_INVALID = -1,
		CST_CONTROLLER_BUTTON_A,
		CST_CONTROLLER_BUTTON_B,
		CST_CONTROLLER_BUTTON_X,
		CST_CONTROLLER_BUTTON_Y,
		CST_CONTROLLER_BUTTON_BACK,
		CST_CONTROLLER_BUTTON_GUIDE,
		CST_CONTROLLER_BUTTON_START,
		CST_CONTROLLER_BUTTON_LEFTSTICK,
		CST_CONTROLLER_BUTTON_RIGHTSTICK,
		CST_CONTROLLER_BUTTON_LEFTSHOULDER,
		CST_CONTROLLER_BUTTON_RIGHTSHOULDER,
		CST_CONTROLLER_BUTTON_DPAD_UP,
		CST_CONTROLLER_BUTTON_DPAD_DOWN,
		CST_CONTROLLER_BUTTON_DPAD_LEFT,
		CST_CONTROLLER_BUTTON_DPAD_RIGHT,
		CST_CONTROLLER_BUTTON_MAX
	};

	enum CST_MOUSE_BUTTON{
		CST_MOUSE_BUTTON_LEFT = 1,
		CST_MOUSE_BUTTON_RIGHT = 2,
		CST_MOUSE_BUTTON_MIDDLE = 3
	};

	// grabs the controller
}
#endif